<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd">
    <modelVersion>4.0.0</modelVersion>

    <groupId>ru.ibs.dtm</groupId>
    <artifactId>dtm-query-execution-core</artifactId>
    <version>2.0.0-SNAPSHOT</version>
    <packaging>jar</packaging>
    <name>DTM Core</name>

    <parent>
        <groupId>ru.ibs.dtm</groupId>
        <artifactId>parent</artifactId>
        <version>2.0.0-SNAPSHOT</version>
    </parent>

    <dependencies>
        <!-- DTM -->
        <dependency>
            <groupId>ru.ibs.dtm</groupId>
            <artifactId>dtm-common</artifactId>
            <version>2.0.0-SNAPSHOT</version>
        </dependency>
        <dependency>
            <groupId>ru.ibs.dtm</groupId>
            <artifactId>dtm-query-execution-plugin-api</artifactId>
            <version>2.0.0-SNAPSHOT</version>
            <exclusions>
                <exclusion>
                    <groupId>ru.ibs</groupId>
                    <artifactId>dtm-common</artifactId>
                </exclusion>
            </exclusions>
        </dependency>

        <!-- Plugins -->
        <dependency>
            <groupId>ru.ibs.dtm</groupId>
            <artifactId>dtm-query-execution-plugin-adg</artifactId>
            <version>${project.version}</version>
            <exclusions>
                <exclusion>
                    <groupId>org.springframework.boot</groupId>
                    <artifactId>spring-boot-starter</artifactId>
                </exclusion>
            </exclusions>
        </dependency>
        <dependency>
            <groupId>ru.ibs.dtm</groupId>
            <artifactId>dtm-query-execution-plugin-adb</artifactId>
            <version>${project.version}</version>
            <exclusions>
                <exclusion>
                    <groupId>org.springframework.boot</groupId>
                    <artifactId>spring-boot-starter</artifactId>
                </exclusion>
            </exclusions>
        </dependency>
        <dependency>
            <groupId>ru.ibs.dtm</groupId>
            <artifactId>dtm-query-execution-plugin-adqm</artifactId>
            <version>${project.version}</version>
            <exclusions>
                <exclusion>
                    <groupId>org.springframework.boot</groupId>
                    <artifactId>spring-boot-starter</artifactId>
                </exclusion>
            </exclusions>
        </dependency>

        <!--Spring-->
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter</artifactId>
        </dependency>
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-configuration-processor</artifactId>
            <optional>true</optional>
        </dependency>

        <!--Vertx-->
        <dependency>
            <groupId>io.vertx</groupId>
            <artifactId>vertx-core</artifactId>
            <version>${vertx.version}</version>
        </dependency>
        <dependency>
            <groupId>io.vertx</groupId>
            <artifactId>vertx-web</artifactId>
            <version>${vertx.version}</version>
        </dependency>
        <dependency>
            <groupId>io.vertx</groupId>
            <artifactId>vertx-web-client</artifactId>
            <version>${vertx.version}</version>
        </dependency>
        <dependency>
            <groupId>io.vertx</groupId>
            <artifactId>vertx-mysql-client</artifactId>
            <version>${vertx.version}</version>
        </dependency>
        <dependency>
            <groupId>io.vertx</groupId>
            <artifactId>vertx-web-api-contract</artifactId>
            <version>${vertx.version}</version>
        </dependency>
        <dependency>
            <groupId>io.vertx</groupId>
            <artifactId>vertx-zookeeper</artifactId>
            <version>${vertx.version}</version>
            <exclusions>
                <exclusion>
                    <groupId>org.slf4j</groupId>
                    <artifactId>slf4j-log4j12</artifactId>
                </exclusion>
                <exclusion>
                    <groupId>log4j</groupId>
                    <artifactId>log4j</artifactId>
                </exclusion>
            </exclusions>
        </dependency>

        <!--DataStorage-->
        <dependency>
            <groupId>org.liquibase</groupId>
            <artifactId>liquibase-core</artifactId>
            <version>${liquibase.version}</version>
        </dependency>
        <dependency>
            <groupId>org.mariadb.jdbc</groupId>
            <artifactId>mariadb-java-client</artifactId>
        </dependency>
        <dependency>
            <groupId>org.apache.calcite</groupId>
            <artifactId>calcite-core</artifactId>
            <version>${calcite.version}</version>
        </dependency>
        <dependency>
            <groupId>org.apache.calcite</groupId>
            <artifactId>calcite-server</artifactId>
            <version>${calcite.version}</version>
        </dependency>

        <dependency>
            <groupId>org.projectlombok</groupId>
            <artifactId>lombok</artifactId>
            <version>1.18.12</version>
            <scope>provided</scope>
        </dependency>

        <!--JOOQ-->
        <dependency>
            <groupId>org.jooq</groupId>
            <artifactId>jooq</artifactId>
            <version>${jooq.version}</version>
        </dependency>
        <dependency>
            <groupId>io.github.jklingsporn</groupId>
            <artifactId>vertx-jooq-classic-async</artifactId>
            <version>${vertx.jooq.version}</version>
        </dependency>
        <dependency>
            <groupId>org.junit.jupiter</groupId>
            <artifactId>junit-jupiter</artifactId>
            <scope>test</scope>
        </dependency>

        <dependency>
            <groupId>org.apache.commons</groupId>
            <artifactId>commons-lang3</artifactId>
            <version>${apache.commons.lang.version}</version>
        </dependency>
        <dependency>
            <groupId>com.google.guava</groupId>
            <artifactId>guava</artifactId>
            <version>${guava.version}</version>
        </dependency>

        <!--Tests-->
        <dependency>
            <groupId>org.junit.jupiter</groupId>
            <artifactId>junit-jupiter-engine</artifactId>
            <version>${junit-jupiter-engine.version}</version>
            <scope>test</scope>
        </dependency>
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-test</artifactId>
            <scope>test</scope>
            <exclusions>
                <exclusion>
                    <groupId>org.junit.vintage</groupId>
                    <artifactId>junit-vintage-engine</artifactId>
                </exclusion>
            </exclusions>
        </dependency>
        <dependency>
            <groupId>io.vertx</groupId>
            <artifactId>vertx-junit5</artifactId>
            <version>${vertx.version}</version>
            <scope>test</scope>
        </dependency>
        <dependency>
            <groupId>io.vertx</groupId>
            <artifactId>vertx-unit</artifactId>
            <version>${vertx.version}</version>
            <scope>test</scope>
        </dependency>
        <dependency>
            <groupId>org.hamcrest</groupId>
            <artifactId>hamcrest</artifactId>
            <scope>test</scope>
        </dependency>
    </dependencies>

    <build>
        <plugins>
            <plugin>
                <groupId>org.springframework.boot</groupId>
                <artifactId>spring-boot-maven-plugin</artifactId>
                <version>2.2.4.RELEASE</version>
                <executions>
                    <execution>
                        <goals>
                            <goal>build-info</goal>
                        </goals>
                    </execution>
                </executions>
            </plugin>
            <plugin>
                <groupId>org.codehaus.mojo</groupId>
                <artifactId>javacc-maven-plugin</artifactId>
                <version>2.6</version>
                <executions>
                    <execution>
                        <id>javacc</id>
                        <goals>
                            <goal>javacc</goal>
                        </goals>
                        <configuration>
                            <sourceDirectory>${project.build.directory}/generated-sources/fmpp</sourceDirectory>
                            <includes>
                                <include>**/Parser.jj</include>
                            </includes>
                            <lookAhead>2</lookAhead>
                            <isStatic>false</isStatic>
                        </configuration>
                    </execution>
                </executions>
            </plugin>
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-dependency-plugin</artifactId>
                <executions>
                    <execution>
                        <id>unpack</id>
                        <phase>validate</phase>
                        <goals>
                            <goal>unpack</goal>
                        </goals>
                        <configuration>
                            <artifactItems>
                                <artifactItem>
                                    <groupId>org.apache.calcite</groupId>
                                    <artifactId>calcite-core</artifactId>
                                    <version>${calcite.version}</version>
                                    <type>jar</type>
                                    <overWrite>false</overWrite>
                                    <outputDirectory>${project.build.directory}</outputDirectory>
                                    <includes>**/Parser.jj</includes>
                                    <excludes>**/*.class,**/*.xml,**/*test.class</excludes>
                                </artifactItem>
                                <artifactItem>
                                    <groupId>ru.ibs.dtm</groupId>
                                    <artifactId>dtm-query-execution-plugin-adb</artifactId>
                                    <type>jar</type>
                                    <overWrite>false</overWrite>
                                    <outputDirectory>${project.build.directory}/classes/config/plugin/adb
                                    </outputDirectory>
                                    <includes>**/application.yml</includes>
                                    <excludes>**/*.class,**/*.xml,**/*test.class</excludes>
                                </artifactItem>
                                <artifactItem>
                                    <groupId>ru.ibs.dtm</groupId>
                                    <artifactId>dtm-query-execution-plugin-adg</artifactId>
                                    <type>jar</type>
                                    <overWrite>false</overWrite>
                                    <outputDirectory>${project.build.directory}/classes/config/plugin/adg
                                    </outputDirectory>
                                    <includes>**/application.yml</includes>
                                    <excludes>**/*.class,**/*.xml,**/*test.class</excludes>
                                </artifactItem>
                            </artifactItems>
                        </configuration>
                    </execution>
                </executions>
            </plugin>
            <plugin>
                <groupId>org.liquibase</groupId>
                <artifactId>liquibase-maven-plugin</artifactId>
                <version>${liquibase.version}</version>
                <configuration>
                    <changeLogDirectory>src/main/resources/db/changelog/serviceDb</changeLogDirectory>
                    <changeLogFile>src/main/resources/db/changelog/serviceDb/changelog.yml</changeLogFile>
<!--                    <dataDir>src/main/resources/db/data/serviceDb</dataDir>-->
                    <!-- log  -->
                    <verbose>true</verbose>
                    <logging>info</logging>
                    <promptOnNonLocalDatabase>true</promptOnNonLocalDatabase>
                </configuration>
            </plugin>
            <plugin>
                <groupId>org.apache.drill.tools</groupId>
                <artifactId>drill-fmpp-maven-plugin</artifactId>
                <version>1.17.0</version>
                <executions>
                    <execution>
                        <configuration>
                            <config>src/main/codegen/config.fmpp</config>
                            <output>${project.build.directory}/generated-sources/fmpp</output>
                            <templates>${project.build.directory}/codegen/templates</templates>
                        </configuration>
                        <id>generate-fmpp-sources</id>
                        <phase>validate</phase>
                        <goals>
                            <goal>generate</goal>
                        </goals>
                    </execution>
                </executions>
            </plugin>
            <plugin>
                <!-- Specify the maven code generator plugin -->
                <groupId>org.jooq</groupId>
                <artifactId>jooq-codegen-maven</artifactId>
                <version>3.13.1</version>
                <!-- The plugin should hook into the generate goal -->
                <executions>
                    <execution>
                        <id>information-schema-exec</id>
                        <goals>
                            <goal>generate</goal>
                        </goals>
                        <!-- Specify the plugin configuration.
                 The configuration format is the same as for the standalone code generator -->
                        <configuration>
                            <!-- JDBC connection parameters -->
                            <jdbc>
                                <driver>com.mysql.jdbc.Driver</driver>
                                <url>
                                    jdbc:mysql://${datasource.service.options.host}:${datasource.service.options.port}/${datasource.service.options.database}
                                </url>
                                <user>${datasource.service.options.user}</user>
                                <password>${datasource.service.options.password}</password>
                            </jdbc>
                            <!-- Generator parameters -->
                            <generator>
                                <name>io.github.jklingsporn.vertx.jooq.generate.classic.ClassicAsyncVertxGenerator
                                </name>
                                <database>
                                    <name>org.jooq.meta.mysql.MySQLDatabase</name>
                                    <includes>
                                        columns
                                        |tables
                                        |key_column_usage
                                    </includes>
                                    <inputSchema>information_schema</inputSchema>
                                    <!--outputSchema>dtmservice</outputSchema-->
                                    <unsignedTypes>false</unsignedTypes>
                                    <forcedTypes>
                                        <!-- Convert tinyint to boolean -->
                                        <forcedType>
                                            <name>BOOLEAN</name>
                                            <types>(?i:TINYINT)</types>
                                        </forcedType>
                                        <!-- Convert varchar column with name 'someJsonObject' to a io.vertx.core.json.JsonObject-->
                                        <forcedType>
                                            <userType>io.vertx.core.json.JsonObject</userType>
                                            <converter>io.github.jklingsporn.vertx.jooq.shared.JsonObjectConverter
                                            </converter>
                                            <expression>someJsonObject</expression>
                                            <types>.*</types>
                                        </forcedType>
                                        <!-- Convert varchar column with name 'someJsonArray' to a io.vertx.core.json.JsonArray-->
                                        <forcedType>
                                            <userType>io.vertx.core.json.JsonArray</userType>
                                            <converter>io.github.jklingsporn.vertx.jooq.shared.JsonArrayConverter
                                            </converter>
                                            <expression>someJsonArray</expression>
                                            <types>.*</types>
                                        </forcedType>
                                    </forcedTypes>
                                </database>
                                <target>
                                    <!-- This is where jOOQ will put your files -->
                                    <packageName>org.jooq.generated.information_schema</packageName>
                                    <!--directory>${project.basedir}/src/main/java</-->
                                </target>
                                <generate>
                                    <interfaces>true</interfaces>
                                    <daos>true</daos>
                                    <fluentSetters>true</fluentSetters>
                                </generate>
                                <strategy>
                                    <name>io.github.jklingsporn.vertx.jooq.generate.VertxGeneratorStrategy</name>
                                </strategy>
                            </generator>
                        </configuration>
                    </execution>
                    <execution>
                        <id>dtmservice-exec</id>
                        <goals>
                            <goal>generate</goal>
                        </goals>
                        <!-- Specify the plugin configuration.
                 The configuration format is the same as for the standalone code generator -->
                        <configuration>
                            <!-- JDBC connection parameters -->
                            <jdbc>
                                <driver>com.mysql.jdbc.Driver</driver>
                                <url>
                                    jdbc:mysql://${datasource.service.options.host}:${datasource.service.options.port}/${datasource.service.options.database}
                                </url>
                                <user>${datasource.service.options.user}</user>
                                <password>${datasource.service.options.password}</password>
                            </jdbc>
                            <!-- Generator parameters -->
                            <generator>
                                <name>io.github.jklingsporn.vertx.jooq.generate.classic.ClassicAsyncVertxGenerator
                                </name>
                                <database>
                                    <name>org.jooq.meta.mysql.MySQLDatabase</name>
                                    <includes>
                                        datamarts_registry
                                        |entities_registry
                                        |attributes_registry
                                        |data_types_registry
                                        |download_external_type
                                        |download_external_format
                                        |download_external_table
                                        |download_external_table_attribute
                                        |download_query
                                        |delta_data
                                        |upload_external_table
                                        |upload_query
                                        |views_registry
                                    </includes>
                                    <inputSchema>${datasource.service.options.database}</inputSchema>
                                    <!--outputSchema>dtmservice</outputSchema-->
                                    <unsignedTypes>false</unsignedTypes>
                                    <forcedTypes>
                                        <!-- Convert tinyint to boolean -->
                                        <forcedType>
                                            <name>BOOLEAN</name>
                                            <types>(?i:TINYINT)</types>
                                        </forcedType>
                                        <!-- Convert varchar column with name 'someJsonObject' to a io.vertx.core.json.JsonObject-->
                                        <forcedType>
                                            <userType>io.vertx.core.json.JsonObject</userType>
                                            <converter>io.github.jklingsporn.vertx.jooq.shared.JsonObjectConverter
                                            </converter>
                                            <expression>someJsonObject</expression>
                                            <types>.*</types>
                                        </forcedType>
                                        <!-- Convert varchar column with name 'someJsonArray' to a io.vertx.core.json.JsonArray-->
                                        <forcedType>
                                            <userType>io.vertx.core.json.JsonArray</userType>
                                            <converter>io.github.jklingsporn.vertx.jooq.shared.JsonArrayConverter
                                            </converter>
                                            <expression>someJsonArray</expression>
                                            <types>.*</types>
                                        </forcedType>
                                    </forcedTypes>
                                </database>
                                <target>
                                    <!-- This is where jOOQ will put your files -->
                                    <packageName>org.jooq.generated.dtmservice</packageName>
                                    <!--directory>${project.basedir}/src/main/java</directory-->
                                </target>
                                <generate>
                                    <interfaces>true</interfaces>
                                    <daos>true</daos>
                                    <fluentSetters>true</fluentSetters>
                                </generate>
                                <strategy>
                                    <name>io.github.jklingsporn.vertx.jooq.generate.VertxGeneratorStrategy</name>
                                </strategy>
                            </generator>
                        </configuration>
                    </execution>
                </executions>
                <dependencies>
                    <dependency>
                        <groupId>mysql</groupId>
                        <artifactId>mysql-connector-java</artifactId>
                        <version>5.1.37</version>
                    </dependency>
                    <dependency>
                        <groupId>io.github.jklingsporn</groupId>
                        <artifactId>vertx-jooq-generate</artifactId>
                        <version>5.1.0</version>
                    </dependency>
                </dependencies>
            </plugin>
        </plugins>
    </build>

</project>
