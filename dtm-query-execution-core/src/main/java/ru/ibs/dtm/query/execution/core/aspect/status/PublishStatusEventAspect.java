package ru.ibs.dtm.query.execution.core.aspect.status;import lombok.extern.slf4j.Slf4j;import lombok.val;import org.aspectj.lang.JoinPoint;import org.aspectj.lang.annotation.After;import org.aspectj.lang.annotation.Aspect;import org.springframework.boot.autoconfigure.condition.ConditionalOnProperty;import org.springframework.stereotype.Component;import ru.ibs.dtm.common.status.StatusEventCode;import ru.ibs.dtm.kafka.core.service.kafka.KafkaStatusEventPublisher;import ru.ibs.dtm.query.execution.core.factory.StatusEventFactory;import java.util.HashMap;import java.util.Map;@Slf4j@Aspect@Component@ConditionalOnProperty(    value = "status.event.publish.enabled",    matchIfMissing = false)public class PublishStatusEventAspect implements StatusEventFactoryRegistry {    private final KafkaStatusEventPublisher kafkaStatusEventPublisher;    private Map<StatusEventCode, StatusEventFactory<?>> factoryMap;    public PublishStatusEventAspect(KafkaStatusEventPublisher kafkaStatusEventPublisher) {        this.kafkaStatusEventPublisher = kafkaStatusEventPublisher;        factoryMap = new HashMap<>();    }    @After("execution(* ru.ibs.dtm.query.execution.core.aspect.status.StatusEventPublisher.publishStatus(..))")    public void onPublishStatusEvent(JoinPoint joinPoint) {        try {            val eventCode = (StatusEventCode) joinPoint.getArgs()[0];            val datamart = (String) joinPoint.getArgs()[1];            val eventData = joinPoint.getArgs()[2];            if (factoryMap.containsKey(eventCode)) {                val eventRequest = factoryMap.get(eventCode).create(datamart, eventData);                kafkaStatusEventPublisher.publish(eventRequest, ar -> {                    if (ar.succeeded()) {                        log.debug("StatusEvent publish completed [{}]", eventRequest);                    } else {                        log.debug("StatusEvent publish error", ar.cause());                    }                });            } else {                log.error("StatusEventCode not supported [{}]", eventCode);            }        } catch (Exception e) {            log.debug("StatusEvent publish error", e);        }    }    @Override    public void registryFactory(StatusEventFactory<?> factory) {        factoryMap.put(factory.getEventCode(), factory);    }}